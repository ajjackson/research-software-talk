#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: reveal_title_slide:"<h2>%t</h2><h2>%a</h2><h3>%e</h3>"
#+OPTIONS: toc:nil
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: solarized
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./presentation.css
#+BEAMER_FRAME_LEVEL: 2

#+TITLE: Research software development
#+AUTHOR: Adam J. Jackson
#+EMAIL: adam.jackson@ucl.ac.uk

* COMMENT Software protips
  - Brainstorming for WMD group presentation

  - Zen of Python has lots of good stuff in. Could use as a framing
    device or as a closing summary.

  - Classify types of research software that have different needs,
    and may overlap.

    - Small program
      - e.g. /get-primitive/
      - Often called a "script" but doesn't have to be a scripting language
      - Does one job well
      - May even be a "single-shot" analysis with no options       
      - Requires
        - Comments to aid understanding and reproducibility
        - Help command and/or README
      - Nice-to-have
        - Testing with sample data
    - Library
      - e.g. /SMACT/
      - To be re-used and called from other programs via _API_
      - To be maintained and developed
      - Requires
        - API documentation. (In Python, use Sphinx and docstrings.)
        - Installation notes
        - Test suite. Libs functions get called with different kinds
          of data and from different states; lots more scope for
          breakage if these cases are not defined and tested.
      - Nice-to-have
        - Usage guide; introduction to package and usage
          examples. It's hard to interpret API docs without this!
        - Standardised coding style (good for contributions)
        - CLI scripts provide an interface for non-developers and
          useful examples for would-be API users.
    - "Code" (large program)
      - e.g. /VASP/
      - Multi-functional package for some general problem type
      - Not expected to be self-explanatory as a small program
      - Contains many components which are re-used for different
        problems
      - Usage is primarily through a CLI or GUI
      - Requires
        - API for efficiently adding/extending features
        - API documentation for developers
        - User interface (CLI and/or GUI)
        - CLI documentation for general users
          - Should include a tutorial element or there's no real way
            to get started
        - "Regression tests" can spot breakage in
          seemingly-unrelated features when changes are made
          - should be a mixture of unit tests and integration tests

      - Nice-to-have
        - Sample data

    - In practice, my workflow is usually
      1. Script prototype
      2. Convert script to a library for easier integration with other scripts
      3. Add features and variations using the API to make new CL tools


* COMMENT Details
  - Would be nice to include that classic "pro tip" picture


  - Lots of advice and commentaries on good/sustainable practice for
    research software from SSI.


  - "The FAIR guiding principles for scientific data management and stewardship"
    - Comment piece in Scientific Data (Nature)
    - Findable
      - Use persistent identifier
      - Use metadata
    - Accessible
      - Retrievable by an open standard protocal
    - Interoperable
      - Format data in a formal, accessible way
    - Reusable
      - "richly described" and using community standards
      - Usage license and detailed provenance   

  - Many FAIR principles map to Software pretty well
    - Use a public source code repository following community
      standards
      - "Available by request" doesn't count
      - Also use a persistent archive such as Zotero or institutional
        repository
    - Prefer standard data file formats (txt, csv, xml, hdf5) to
      custom binary formats
    - Use a standard license and provide some documentation

  - Software has some other concerns which are not directly addressed
    by FAIR

    - Installation can be complex
    - Hardware requirements/compatibility issues
    - Managing versions


  - Why share research software?
    - Reproducibility of the research analysis. Make it easier to
      a) try the same analysis on different data sets
      b) try slightly different analysis on same data set

      - In the medium term we can expect to see increasing pressure
        from research councils to meaningfully share data and
        facilitate reproducibility

      - In the long term this is important for maintaining public
        trust in scienceg

    - Get external input.
      - External users will find bugs in your code
        - Sometimes they will fix them for you!

    - Gain influence
      - Adding your preferred methods to a package used by other
        people is one way of encouraging the community to use that
        method.

      - Adding a big warning sign to a method is one way of sharing
        your reservations about a technique...

        - Vasp does this really badly, frequently flashing "VERY BAD
          NEWS" warnings for stuff that is absolutely fine.

    - Make it portable
      - Avoids arguments about who owns the code when you change
        institution!


* COMMENT Outline

** Intro
   - "Pro tips"
   - Who am I
   - SSI

** Sustainable Research Software

*** What makes research software (un)sustainable?
**** FAIR principles

**** Application to software

*** Why bother?

*** Key points
    - PROTIP: To make software available, put it somewhere people can get it
    - PROTIP: To make software interoperable, make it work like other software
    - PROTIP: To make software reusable, allow people to reuse it


** Types of research software
   - Different interfaces, docs, testing

** Documentation
   - Defer to the Django talk, but give overview

** Packaging
   - README, CITATION.cff, LICENSE, installation procedure (INSTALL file?)

** The actual programming
   - A lot of this is just practice
   - As with an instrument, practice only helps if it's /good/
     practice
   - Programming is better with friends! It can be easier to spot an
     elegant way of doing something in someone else's code
     - e.g. Class variable for vasp syntax suggested on my pull request
   - Watch the issue tracker of a project you care about (e.g. ASE);
     this is a great way to learn from other people and get your feet
     wet with small contributions.
   - Always code with the expectation that someone else will see and
     tinker with your code. This "someone else" is probably you in a
     year's time.
   - Use a style guide e.g. PEP8
   - Introduce tests as soon as a package becomes non-trivial
   - Premature optimisation is evil
   - Slow code is also evil


* Introduction

** "PRO TIPS"

   #+ATTR_HTML: :width 40%
   [[./images/cyberdemon.jpg]]

   - Sometimes it's ok to state the obvious
   - Sometimes "advanced" problems have simple solutions

** About me
   - MEng chemical engineering at University of Bath (2006-2011)
   - Joined the Sustainable Chemical Technologies DTC
     - Joined Walsh Materials Design group (MRes project, 2011)
     - PhD in same group (2012-2016)
       - "Thermodynamics for practical kesterite photovoltaics"
   - Post-doc in UCL Chemistry (Scanlon Materials Theory Group)
     - Working on novel transparent conductors
     - (Defects, so much hybrid DFT ðŸ˜°)

** About my programming
   - Briefly exposed to BASIC at school
   - Crash-course in Fortran in 2006
   - Used some Matlab in undergrad
   - Self-taught Python since around 2011
   - Tinkered with some other stuff (C, Lisp, Julia, ...)

   #+REVEAL: split

   - Never had a structured course beyond language basics
   - Never been mentored by an experienced programmer

** Projects
   - [[https://github.com/ajjackson]]

   - https://gitlab.com/ase/ase

   #+REVEAL: split

   It's an interesting time to be using Github

   #+ATTR_REVEAL: :frag t
   #+BEGIN_QUOTE
   /When it comes to our commitment to open source, judge us by the actions we have taken in the recent past, our actions today, and in the future./

   **Microsoft CEO Satya Nadella**
   #+END_QUOTE

   #+ATTR_REVEAL: :frag t
   #+BEGIN_QUOTE
   /Microsoft Corp. threatened to close its research facilities in Britain if the government went ahead with plans to promote open-source software, one of David Cameronâ€™s former advisers said./

   **Bloomberg, 2015**
   #+END_QUOTE

* Sustainable Research Software

** Software sustainability
  
  - 92% of academics use research software
  - 69% say that their research would not be practical without it
  - 56% develop their own software 
    - (worryingly, 21% of those have no training in software development)

  (Simon Hettrick, Deputy Director of SSI)
  https://www.software.ac.uk/blog/2014-12-04-its-impossible-conduct-research-without-software-say-7-out-10-uk-researchers

  #+REVEAL: split
   [[./images/ssi-logo.png]]

   - Supporting research software community in the UK
   - "Better software, better research"
   - Training (partnership with Software Carpentry)
   - Advocacy/policy (Research Software Engineers)
   - Fellowship programme (this includes me!)

** What makes research software (un)sustainable?
*** FAIR principles
    Developed for "scientific data management" 
    https://www.nature.com/articles/sdata201618

    - Findable
      - Use persistent identifier
      - Use metadata
    - Available
      - Retrievable by an open standard protocal
    - Interoperable
      - Format data in a formal, accessible way
    - Reusable
      - "richly described" and using community standards
      - Usage license and detailed provenance   

*** Software trouble
    Software has some other concerns which are not directly addressed
    by FAIR
    - Installation can be complex
    - Hardware requirements/compatibility issues
    - Managing versions
    
*** Application to software

    People are working on ideas about relationship between code, data and science

    http://sciencecodemanifesto.org/

    https://codeisscience.github.io/manifesto/manifesto.html

** Why bother?

   - Reproducibility
     https://www.nature.com/news/1-500-scientists-lift-the-lid-on-reproducibility-1.19970

** Key points
*** Availability   
    In a recent study researchers requested data and code from a
    random sample of 204 /Science/ papers...
    https://doi.org/10.1073/pnas.1708290115

    /Science/ has a code availability policy.

    #+BEGIN_QUOTE
    When you approach a PI for the source codes and raw data, you
    better explain who you are, whom you work for, why you need the
    data and what you are going to do with it.
    #+END_QUOTE
    #+BEGIN_QUOTE
    I have to say that this is a very unusual request without any
    explanation! Please ask your supervisor to send me an email with a
    detailed, and I mean detailed, explanation.
    #+END_QUOTE
   #+REVEAL: split
   #+BEGIN_QUOTE
   Thank you for your interest in our paper. For the [redacted]
   calculations I used my own code, and there is no public version of
   this code, which could be downloaded. Since this code is not very
   user-friendly and is under constant development I prefer not to
   share this code.
   #+END_QUOTE
   #+BEGIN_QUOTE
   R is a free software package available at www.r-project.org/ I used
   R for the [redacted] models. As you probably know, [redacted] and
   [redacted] are quite complicated. But I donâ€™t have to tell you that
   given that you are a statistics student! I used Matlab for the
   geometry.
   #+END_QUOTE

   #+REVEAL: split

    #+ATTR_HTML: :width 40%
    [[./images/protip-available.png]]

    - Use a public source code repository following community
      standards
      - Also use a persistent archive such as Zenodo or institutional
        repository

*** Interoperability
   #+ATTR_HTML: :width 40%
   [[./images/protip-interoperable.png]]  

*** Re-usability

   #+ATTR_HTML: :width 40%
   [[./images/protip-reusable.png]]


* Software projects

* Documentation

* Packaging

* The actual coding bit

* Summary
